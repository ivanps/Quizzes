- Class: meta
  Course: Quizzes
  Lesson: R Basics
  Author: Dr. Ivan Pacheco
  Type: Standard
  Organization: Tecnologico de Monterrey
  Version: 2.2.16

- Class: text
  Output: This quiz is on basic R programming. You can try each question as many times as you want, but each wrong trial is penalized by 20%. At the end you can report your best result through the google form. Let's start!!

- Class: cmd_question
  Output: Assign your SID (matr√≠cula) to a character variable called matr. Make sure you type your correct student ID number because that how I will assign the grades.
  CorrectAnswer: matr <- "your_name"
  AnswerTests: check_var_is()

- Class: cmd_question
  Output: Construct a sequence of 30 numbers between 50 and 100 by using the function "seq" with the option "length". Store the result in a new variable called my_seq.
  CorrectAnswer: my_seq <- seq(50, 100, length=30)
  AnswerTests: check_omnitest(correctExpr='my_seq <- seq(50, 100, length=30)')

- Class: cmd_question
  Output: Get a vector that contains 10 repetitions of the vector (0, 11, 22). Use the function "rep"" with option "times".
  CorrectAnswer: rep(c(0, 11, 22), times = 10)
  AnswerTests: check_omnitest(correctExpr='rep(c(0, 11, 22), times = 10)')

- Class: cmd_question
  Output: Vector recycling! Use la "paste" function to generate the character vector "X1" "X2" "X3". Don't assign to result to a variable.
  CorrectAnswer: paste("X", 1:3, sep = "")
  AnswerTests: check_omnitest(correctExpr='paste("X", 1:3, sep = "")')

- Class: cmd_question
  Output: Consider the vectors c(1/0, 2+NA, 0/0, 10). Call is.na() on the vector.
  CorrectAnswer: is.na(c(1/0, 2+NA, 0/0, 10))
  AnswerTests: check_omnitest(correctExpr='is.na(c(1/0, 2+NA, 0/0, 10))')

- Class: cmd_question
  Output: Create a matrix from a vector c(5,82.4,4,91.7,5,88.5) and dimensions (3 rows, 2 columns) by calling the matrix() function. Assign the result to my_matrix
  CorrectAnswer: my_matrix <- matrix(c(5,82.4,4,91.7,5,88.5), nrow=3, ncol=2)
  AnswerTests: check_omnitest('my_matrix <- matrix(c(5,82.4,4,91.7,5,88.5), nrow=3, ncol=2)')

- Class: cmd_question
  Output: Construct a data frame where the first entry of the function is the vector c("Miguel", "Susana", "Felipe") and the second entry is my_matrix. Assign the name my_df to this data frame.
  CorrectAnswer: my_df <- data.frame(c("Miguel", "Susana", "Felipe"), my_matrix)
  AnswerTests: check_omnitest(correctExpr='my_df <- data.frame(c("Miguel", "Susana", "Felipe"), my_matrix)')

- Class: cmd_question
  Output: Now, use the colnames() function to set the `colnames` attribute for our data frame my_df. The first column refers to "Student name", second column to "Semester" and the third column to "Grade".
  CorrectAnswer: colnames(my_df) <- c("Student name", "Semester", "Grade")
  AnswerTests: check_omnitest(correctExpr='colnames(my_df) <- c("Student name", "Semester", "Grade")')

- Class: cmd_question
  Output: I've stored a dataset in a variable called flags. Use the funtion "head" to preview the first six lines (i.e. the 'head') of the dataset.
  CorrectAnswer: head(flags)
  AnswerTests: check_omnitest(correctExpr='head(flags)')

- Class: cmd_question
  Output: Find the number of rows of the data frame flags.
  CorrectAnswer: nrow(flags)
  AnswerTests: check_omnitest(correctExpr='nrow(flags)')

- Class: cmd_question
  Output: Perhaps the most useful and concise function for understanding the *str*ucture of your data is str(). Get the structure of the data frame flags.
  CorrectAnswer: str(flags)
  AnswerTests: check_omnitest(correctExpr='str(flags)')

- Class: cmd_question
  Output: Generate 10 random numbers from a normal distribution with a mean of 100 and a standard deviation of 25. Assign the result to the variable x.
  CorrectAnswer: x <- rnorm(10, 100, 25)
  AnswerTests: check_omnitest('x <- rnorm(10, 100, 25)')

